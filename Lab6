> install.packages("ISLR")
> library(ISLR)
> library(MASS)
> library(boot)
> set.seed(1)
> 
> train = sample(392,196)
> 
> lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
> 
> attach(Auto)
> mean((mpg-predict(lm.fit,Auto))[-train]^2)
[1] 23.26601
> lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train)
> mean((mpg-predict(lm.fit2,Auto))[-train]^2) 
[1] 18.71646
> lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train)
> mean((mpg-predict(lm.fit3,Auto))[-train]^2)
[1] 18.79401
> 
> set.seed(2)
> 
> train = sample(392,196)
> lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
> mean((mpg-predict(lm.fit,Auto))[-train]^2)
[1] 25.72651
> lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train)
> mean((mpg-predict(lm.fit2,Auto))[-train]^2) 
[1] 20.43036
> lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train)
> mean((mpg-predict(lm.fit3,Auto))[-train]^2)
[1] 20.38533

>install.packages("randomForest")
>library(randomForest) randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
>data1 <-read.csv(file.choose(),header =F)
>head(data1)
V1	V2 V3 V4	V5	V6	V7







colnames(data1)<- c("BuyingPrice","Maintenance","NumDoors","NumPersons","BootSpace","Safety","Con dition")
>head(data1)
BuyingPrice Maintenance NumDoors NumPersons BootSpace Safety Condition

1	vhigh	vhigh	2	2	small	low	unacc
2	vhigh	vhigh	2	2	small	med	unacc
3	vhigh	vhigh	2	2	small	high	unacc
4	vhigh	vhigh	2	2	med	low	unacc
5	vhigh	vhigh	2	2	med	med	unacc
6	vhigh	vhigh	2	2	med	high	unacc
>str(data1)
'data.frame': 1728 obs. of	7 variables:
$ BuyingPrice: chr	"vhigh" "vhigh" "vhigh" "vhigh" ...
$ Maintenance: chr	"vhigh" "vhigh" "vhigh" "vhigh" ...
$ NumDoors	: chr	"2" "2" "2" "2" ...
$ NumPersons : chr	"2" "2" "2" "2" ...
$ BootSpace	: chr	"small" "small" "small" "med" ...
$ Safety	: chr	"low" "med" "high" "low" ...
$ Condition	: chr	"unacc" "unacc" "unacc" "unacc" ...
>levels(data1$Condition) NULL
>summary(data1)
BuyingPrice		Maintenance			NumDoors			NumPersons Length:1728			Length:1728		Length:1728		Length:1728 Class :character	Class :character	Class :character	Class :character
Mode	:character	Mode	:character	Mode	:character	Mode	:character BootSpace		Safety		Condition
Length:1728		Length:1728		Length:1728 Class :character	Class :character	Class :character

Mode	:character	Mode	:character	Mode	:character
>data1$Condition <- factor(data1$Condition)#这个就是你随机森林报错原因，y 需要因子化
>set.seed(100)
>train <-sample(nrow(data1), 0.7*nrow(data1), replace =FALSE)
>TrainSet <-data1[train,]
>ValidSet <-data1[-train,]
>summary(TrainSet)
BuyingPrice		Maintenance			NumDoors			NumPersons Length:1209			Length:1209		Length:1209		Length:1209 Class :character	Class :character	Class :character	Class :character
Mode	:character	Mode	:character	Mode	:character	Mode	:character

BootSpace			Safety			Condition Length:1209		Length:1209		acc	:260 Class :character	Class :character	good : 46 Mode	:character		Mode	:character	unacc:856
vgood: 47
>summary(ValidSet)
BuyingPrice		Maintenance			NumDoors			NumPersons Length:519			Length:519		Length:519		Length:519 Class :character	Class :character	Class :character	Class :character
Mode	:character	Mode	:character	Mode	:character	Mode	:character

BootSpace			Safety			Condition Length:519		Length:519		acc	:124 Class :character	Class :character	good : 23 Mode	:character		Mode	:character	unacc:354
vgood: 18
>help(randomForest)# Read the RandomForest Documentation.
>model1 <- randomForest(Condition~.,data =TrainSet,importance =TRUE)
>model1

Call:
randomForest(formula = Condition ~ ., data = TrainSet, importance = TRUE) Type of random forest: classification
Number of trees: 500 No. of variables tried at each split: 2

OOB estimate of	error rate: 3.89% Confusion matrix:
acc good unacc vgood class.error

acc	246	3	9	2	0.05384615
good	21	21	0	4	0.54347826

unacc	7	0	849	0	0.00817757
vgood	1	0	0	46	0.02127660
>model2	<-	randomForest(Condition	~.,	data	=TrainSet,	ntree	=500,	mtry
=6,importance=TRUE)
>model2

Call:
randomForest(formula =  Condition ~  .,  data =  TrainSet, ntree = 500,	mtry = 6, importance = TRUE)
Type of random forest: classification Number of trees: 500
No. of variables tried at each split: 6

OOB estimate of	error rate: 2.48% Confusion matrix:
acc good unacc vgood class.error

acc	248	4	8	0	0.04615385
good	5	41	0	0	0.10869565
unacc	11	1	844	0	0.01401869
vgood	1	0	0	46	0.02127660
>predTrain <- predict(model2,TrainSet, type="class")
>table(predTrain,TrainSet$Condition)#这里是$不是 s

predTrain acc good unacc vgood

acc	260	0	0	0
good	0	46	0	0
unacc	0	0	856	0
vgood	0	0	0	47
>predValid <-predict(model2,ValidSet, type="class")#是 model2 不是 mode1
>table(predValid,ValidSet$Condition)#这里是$不是 s
predValid acc good unacc vgood acc	120	1	1	3
>importance(model2)
acc	good	unacc	vgood MeanDecreaseAccuracy

BuyingPrice 135.56320 71.61869 102.23826	79.26283	188.86884
Maintenance 130.73664 67.79261	98.03007	52.56397	179.36521
NumDoors	24.21779 17.84656	37.29173	20.09303	45.10482
NumPersons	146.89588 52.02787 194.37533	60.51061	233.57882
BootSpace	83.39271 55.05921	75.26914	65.77734	132.91391
Safety	161.91278 89.68233 194.33921 111.56868	261.60522

MeanDecreaseGini

BuyingPrice	100.16083
Maintenance	117.42687
NumDoors	32.05065
NumPersons	98.16992
BootSpace	60.93454
Safety	136.66697
>varImpPlot(model2)
>a=c()
>i=5
>for (i in 3:8){
+	model3	<-randomForest(Condition~.,data=TrainSet,ntree=500,	mtry
=i,importance=TRUE)
+	predValid <- predict(model3,ValidSet,type="class")
+	a[i-2]= mean(predValid ==ValidSet$Condition)
+ }
Warning messages:
1: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
2: In randomForest.default(m, y, ...) : invalid mtry: reset to within valid range
>a
[1] 0.9730250 0.9807322 0.9884393 0.9865125 0.9845857 0.9845857
>plot(3:8,a)
>library(rpart)
>install.packages("caret")
>library(caret)
>library(e1071)
>model_dt <- train(Condition~.,data=TrainSet,method="rpart")
>model_dt_1=predict(model_dt,newdata=TrainSet)
>table(model_dt_1,TrainSet$Condition)

model_dt_1 acc good unacc vgood

acc	202	38	75	47
good	0	0	0	0
unacc	58	8	781	0
vgood	0	0	0	0
>mean(model_dt_1==TrainSet$Condition) [1] 0.8130687
>table(model_dt_1,TrainSet$Condition)

model_dt_1 acc good unacc vgood

acc	202	38	75	47
good	0	0	0	0

unacc	58	8	781	0
vgood	0	0	0	0
>mean(model_dt_1==TrainSet$Condition) [1] 0.8130687
>model_dt_vs =predict(model_dt,newdata=ValidSet)
>table(model_dt_vs,ValidSet$Condition)

model_dt_vs acc good unacc vgood

acc	101	22	41	18
good	0	0	0	0
unacc	23	1	313	0
vgood	0	0	0	0
>mean(model_dt_vs==ValidSet$Condition) [1] 0.7976879
>
